/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => revealExplorerFile
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var revealExplorerFileSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Reveal Explorer File" });
    const linkText = containerEl.createEl("span", {
      text: " \u{1F334}"
    });
    const linkContainer = containerEl.createEl("p", {
      text: "Repository: \u{1F334} "
    });
    linkContainer.createEl("a", {
      text: "1C0D/Obsidian-Reveal-File-in-explorer",
      href: "https://github.com/1C0D/Obsidian-Reveal-File-in-explorer"
    });
    linkContainer.appendChild(linkText);
    new import_obsidian.Setting(containerEl).setName("Fold when clicking title").setDesc(
      "When clicking title, close all folders where the file is not in"
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.foldOtherDirsBefore).onChange((value) => {
        this.plugin.settings.foldOtherDirsBefore = value;
        this.plugin.saveSettings();
        this.plugin.reveal();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Reveal when opening file").setDesc("When opening a file, it will reveal it").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.revealOnOpen).onChange((value) => {
        this.plugin.settings.revealOnOpen = value;
        this.plugin.saveSettings();
        this.plugin.reveal();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Fold when opening file").setDesc("When opening a file, it will also fold other folders").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.foldWhenOpen).onChange((value) => {
        this.plugin.settings.foldWhenOpen = value;
        this.plugin.saveSettings();
        this.plugin.reveal();
      });
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  foldOtherDirsBefore: true,
  revealOnOpen: false,
  foldWhenOpen: false
};
var revealExplorerFile = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.reveal = () => {
      const { workspace } = this.app;
      const containerEl = workspace.containerEl.win;
      this.registerDomEvent(containerEl, "click", this.clickHandler);
      workspace.on("file-open", async () => {
        if (this.settings.revealOnOpen) {
          if (!this.is_file_explorer_open())
            return;
          const activeView = workspace.getActiveViewOfType(import_obsidian2.View);
          if (this.settings.foldWhenOpen)
            await this.fold();
          await this.app.commands.executeCommandById(
            "file-explorer:reveal-active-file"
          );
          setTimeout(async () => {
            this.app.commands.executeCommandById(
              "file-explorer:reveal-active-file"
            );
            setTimeout(async () => {
              this.app.workspace.setActiveLeaf(activeView.leaf, {
                focus: true
              });
            }, 50);
          }, 50);
        }
      });
    };
    this.clickHandler = async (evt) => {
      var _a, _b;
      if ((_a = evt.target) == null ? void 0 : _a.classList.contains("view-header-title")) {
        const { workspace } = this.app;
        const activeView = workspace.getActiveViewOfType(import_obsidian2.View);
        const isNewTab = (activeView == null ? void 0 : activeView.getDisplayText()) === "New tab";
        if (isNewTab)
          return;
        if (this.settings.foldOtherDirsBefore) {
          await this.fold();
        }
        await this.app.commands.executeCommandById(
          "file-explorer:reveal-active-file"
        );
        await this.app.commands.executeCommandById("editor:focus");
        const titleContainerEl = (_b = activeView == null ? void 0 : activeView.containerEl) == null ? void 0 : _b.querySelector(".view-header-title");
        setTimeout(() => {
          titleContainerEl == null ? void 0 : titleContainerEl.focus();
        }, 50);
      }
    };
    this.fold = async () => {
      var _a;
      const { workspace } = this.app;
      const fileExplorer = (_a = workspace.getLeavesOfType("file-explorer")) == null ? void 0 : _a.first();
      if (!fileExplorer) {
        return;
      }
      const activeView = workspace.getActiveViewOfType(import_obsidian2.View);
      if ((activeView == null ? void 0 : activeView.getDisplayText()) === "New tab")
        return;
      function isFolder(file) {
        return file instanceof import_obsidian2.TFolder;
      }
      const files = Object.entries(fileExplorer.view.fileItems);
      for (const [path, fileItem] of files) {
        if (path === "/")
          continue;
        const isFold = isFolder(fileItem.file);
        if (isFold) {
          await fileItem.setCollapsed(true);
        }
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new revealExplorerFileSettingsTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.reveal();
    });
  }
  //seeking for <div class="workspace-tab-header is-active" draggable="true" aria-label="Files" aria-label-delay="300" data-type="file-explorer">
  // so elts <div> with attr data-type = "file-explorer" and with a class "is-active".
  // isFileExplorerActive(): boolean {
  // 	const el = document.querySelector(
  // 		'div[data-type="file-explorer"].is-active'
  // 	);
  // 	return el !== null;
  // }
  //better https://github.com/shichongrui/obsidian-reveal-active-file/blob/master/main.ts
  is_file_explorer_open() {
    const workspace = this.app.workspace;
    let is_open = false;
    workspace.iterateAllLeaves((leaf) => {
      if (leaf.getViewState().type == "file-explorer" && leaf.width > 0) {
        is_open = true;
      }
    });
    return is_open;
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
